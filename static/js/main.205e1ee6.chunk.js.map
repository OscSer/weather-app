{"version":3,"sources":["components/WeatherCard.js","App.js","reportWebVitals.js","index.js"],"names":["CardInfo","description","value","className","WeatherCard","coords","useState","data","setData","useEffect","a","lat","lon","fetch","process","then","result","json","fetchData","main","Card","Header","name","sys","country","Content","moment","format","temp","Date","sunrise","toLocaleTimeString","sunset","weather","humidity","Segment","Dimmer","active","inverted","Loader","size","App","setCoords","results","setResults","setValue","prevCoords","window","localStorage","getItem","JSON","parse","navigator","geolocation","getCurrentPosition","position","latitude","longitude","clearSearch","Container","Search","placeholder","onResultSelect","e","newCoords","coord","setItem","stringify","onSearchChange","regExp","RegExp","escapeRegExp","filteredCities","filter","cities","city","test","sort","b","length","map","title","uniqCities","uniqBy","includes","splice","onFocus","Button","circular","color","content","icon","onClick","key","Math","random","toString","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.205e1ee6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\nimport './WeatherCard.css';\nimport { Dimmer, Loader, Segment, Card } from 'semantic-ui-react';\n\nconst CardInfo = ({ description, value }) => (\n    <div className='card__info'>\n        <span>{`${description}:`}</span>\n        <span className='card__info__value'>{value}</span>\n    </div>\n);\n\nconst WeatherCard = ({ coords }) => {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const { lat, lon } = coords;\n            await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${lon}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n                .then(result => result.json())\n                .then(json => {\n                    setData(json);\n                });\n        }\n        fetchData();\n    }, [coords])\n\n    return data.main\n        ? (\n            <Card className='card'>\n                <Card.Header className=\"card__header center\">\n                    {`${data.name} (${data.sys.country})`}\n                </Card.Header>\n                <Card.Content>\n                    <CardInfo description='Day' value={moment().format('dddd')} />\n                    <CardInfo description='Date' value={moment().format('LL')} />\n                    <CardInfo description='Temprature' value={`${data.main.temp} Â°C`} />\n                    <CardInfo description='Sunrise' value={new Date(data.sys.sunrise * 1000).toLocaleTimeString('en-IN')} />\n                    <CardInfo description='Sunset' value={new Date(data.sys.sunset * 1000).toLocaleTimeString('en-IN')} />\n                    <CardInfo description='Description' value={data.weather[0].main} />\n                    <CardInfo description='Humidity' value={data.main.humidity} />\n                </Card.Content>\n            </Card>\n        )\n        : (\n            <Segment className='card'>\n                <Dimmer active inverted>\n                    <Loader inverted size='large'>Loading</Loader>\n                </Dimmer>\n            </Segment>\n        )\n}\n\nexport default WeatherCard;\n","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport WeatherCard from './components/WeatherCard';\nimport { Search, Container, Button } from 'semantic-ui-react';\nimport cities from './utils/cities.json';\nimport { filter, escapeRegExp, uniqBy } from 'lodash';\n\nexport default function App() {\n  const [coords, setCoords] = useState([]);\n  const [results, setResults] = useState([]);\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    const getCurrentPosition = () => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCoords([{\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        }]);\n      });\n    };\n    const prevCoords = window.localStorage.getItem('coords');\n    if (prevCoords) {\n      setCoords(JSON.parse(prevCoords));\n    } else {\n      getCurrentPosition();\n    }\n  }, []);\n\n  const clearSearch = () => setValue('');\n\n  const onSearchChange = (e, data) => {\n    setValue(data.value);\n    const regExp = new RegExp(escapeRegExp(data.value), 'i');\n    const isMatch = (city) => regExp.test(city.name);\n    const filteredCities = filter(cities, isMatch)\n      .sort((a, b) => a.name.length - b.name.length)\n      .map(city => ({\n        ...city,\n        title: `${city.name} (${city.country})`\n      }));\n    const uniqCities = uniqBy(filteredCities, 'title')\n      .filter(city => !coords.includes(city.coord));\n    setResults(uniqCities.splice(0, 6));\n  }\n\n  const onResultSelect = (e, data) => {\n    const newCoords = [data.result.coord, ...coords];\n    setCoords(newCoords);\n    window.localStorage.setItem('coords', JSON.stringify(newCoords));\n    clearSearch();\n  }\n\n  const onButtonClick = () => {\n    setCoords(coords.map(coord => ({\n      ...coord,\n      key: Math.random().toString(36).slice(2)\n    })));\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n\n        <div className=\"search-container\">\n          <Search\n            // input={{ autoFocus: true }}\n            placeholder='Search more cities...'\n            onResultSelect={onResultSelect}\n            onSearchChange={onSearchChange}\n            results={results}\n            value={value}\n            onFocus={clearSearch}\n          />\n          <Button\n            circular\n            color='facebook'\n            size='big'\n            className='refresh-button'\n            content='Refresh'\n            icon='refresh'\n            onClick={onButtonClick}\n          />\n        </div>\n\n        <div className='cards-container'>\n          {coords.length > 0 && coords.map(coord => (\n            <WeatherCard\n              key={`${coord.lat}-${coord.lon}-${coord.key}`}\n              coords={coord}\n            />\n          ))}\n        </div>\n\n      </Container>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}