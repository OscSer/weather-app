{"version":3,"sources":["components/WeatherCard.js","App.js","reportWebVitals.js","index.js"],"names":["CardInfo","description","value","className","WeatherCard","id","coords","onCloseAction","useState","data","setData","useEffect","a","lat","lon","fetch","process","then","result","json","fetchData","main","Card","Header","name","sys","country","Icon","onClick","Content","moment","format","temp","Date","sunrise","toLocaleTimeString","sunset","weather","humidity","Segment","Dimmer","active","inverted","Loader","size","App","cities","setCities","results","setResults","setValue","loading","setLoading","searchRef","useRef","timeoutRef","prevCities","window","localStorage","getItem","JSON","parse","navigator","geolocation","getCurrentPosition","position","latitude","longitude","key","generateKey","Math","random","toString","slice","handleCloseAction","newCities","remove","city","Container","Search","placeholder","onResultSelect","e","coord","setItem","stringify","onSearchChange","clearTimeout","current","setTimeout","regExp","RegExp","escapeRegExp","filteredResults","filter","citiesResults","test","sort","b","length","map","title","uniqResults","uniqBy","find","splice","ref","Button","circular","color","content","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab684e97.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\nimport './WeatherCard.css';\nimport { Dimmer, Loader, Segment, Card, Icon } from 'semantic-ui-react';\n\nconst CardInfo = ({ description, value }) => (\n    <div className='card__info'>\n        <span>{`${description}:`}</span>\n        <span className='card__info__value'>{value}</span>\n    </div>\n);\n\nconst WeatherCard = ({ id, coords, onCloseAction }) => {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const { lat, lon } = coords;\n            await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${lon}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n                .then(result => result.json())\n                .then(json => {\n                    setData(json);\n                });\n        }\n        fetchData();\n    }, [coords]);\n\n    const handleCloseAction = () => onCloseAction(id);\n\n    return data.main\n        ? (\n            <Card className='card'>\n                <Card.Header className=\"card__header\">\n                    <span>\n                        {`${data.name} (${data.sys.country})`}\n                    </span>\n                    <Icon\n                        className='card__icon'\n                        name='remove'\n                        onClick={handleCloseAction}\n                    />\n                </Card.Header>\n                <Card.Content>\n                    <CardInfo description='Day' value={moment().format('dddd')} />\n                    <CardInfo description='Date' value={moment().format('LL')} />\n                    <CardInfo description='Temprature' value={`${data.main.temp} Â°C`} />\n                    <CardInfo description='Sunrise' value={new Date(data.sys.sunrise * 1000).toLocaleTimeString('en-IN')} />\n                    <CardInfo description='Sunset' value={new Date(data.sys.sunset * 1000).toLocaleTimeString('en-IN')} />\n                    <CardInfo description='Description' value={data.weather[0].main} />\n                    <CardInfo description='Humidity' value={data.main.humidity} />\n                </Card.Content>\n            </Card>\n        )\n        : (\n            <Segment className='card'>\n                <Dimmer active inverted>\n                    <Loader inverted size='large'>Loading</Loader>\n                </Dimmer>\n            </Segment>\n        )\n}\n\nexport default WeatherCard;\n","import './App.css';\nimport React, { useEffect, useState, useRef } from \"react\";\nimport WeatherCard from './components/WeatherCard';\nimport { Search, Container, Button } from 'semantic-ui-react';\nimport citiesResults from './utils/cities.json';\nimport { filter, escapeRegExp, uniqBy, remove } from 'lodash';\n\nexport default function App() {\n  const [cities, setCities] = useState([]);\n  const [results, setResults] = useState([]);\n  const [value, setValue] = useState('');\n  const [loading, setLoading] = useState(false);\n  const searchRef = useRef(); //TODO: blur()\n  const timeoutRef = useRef()\n\n  useEffect(() => {\n    const getCurrentPosition = () => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCities([{\n          coords: {\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          },\n          key: generateKey()\n        }]);\n      });\n    };\n    const prevCities = window.localStorage.getItem('cities');\n    if (prevCities) {\n      setCities(JSON.parse(prevCities));\n    } else {\n      getCurrentPosition();\n    }\n  }, [])\n\n  const generateKey = () => Math.random().toString(36).slice(2);\n\n  const handleSearchChange = (e, data) => {\n    clearTimeout(timeoutRef.current)\n    setValue(data.value);\n    setLoading(true);\n    if (data.value) {\n      timeoutRef.current = setTimeout(() => {\n        const regExp = new RegExp(escapeRegExp(data.value), 'i');\n        const isMatch = (result) => regExp.test(result.name);\n        const filteredResults = filter(citiesResults, isMatch)\n          .sort((a, b) => a.name.length - b.name.length)\n          .map(result => ({\n            ...result,\n            title: `${result.name} (${result.country})`\n          }));\n        const uniqResults = uniqBy(filteredResults, 'title')\n          .filter(result => !cities.find(city => city.coords === result.coord));\n        setResults(uniqResults.splice(0, 6));\n        setLoading(false);\n      }, 500)\n    } else {\n      setLoading(false);\n    }\n  }\n\n  const handleResultSelect = (e, data) => {\n    const newCities = [\n      {\n        coords: { ...data.result.coord },\n        key: generateKey()\n      },\n      ...cities\n    ];\n    setCities(newCities);\n    window.localStorage.setItem('cities', JSON.stringify(newCities));\n    setValue('');\n  }\n\n  const handleRefresh = () => {\n    setCities(cities.map(city => ({ ...city, key: generateKey() })));\n  }\n\n  const handleCloseAction = (key) => {\n    let newCities = [...cities];\n    remove(newCities, city => city.key === key);\n    setCities(newCities);\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n\n        <div className=\"search-container\">\n          <Search\n            placeholder='Search more cities...'\n            onResultSelect={handleResultSelect}\n            onSearchChange={handleSearchChange}\n            results={results}\n            value={value}\n            ref={searchRef}\n            loading={loading}\n          />\n          <Button\n            circular\n            color='facebook'\n            size='big'\n            className='refresh-button'\n            content='Refresh'\n            icon='refresh'\n            onClick={handleRefresh}\n          />\n        </div>\n\n        <div className='cards-container'>\n          {cities.length > 0 && cities.map(city => (\n            <WeatherCard\n              id={city.key}\n              key={city.key}\n              coords={city.coords}\n              onCloseAction={handleCloseAction}\n            />\n          ))}\n        </div>\n\n      </Container>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}