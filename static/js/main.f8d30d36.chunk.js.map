{"version":3,"sources":["components/WeatherCard.js","App.js","index.js"],"names":["CardInfo","description","value","className","WeatherCard","id","coords","onCloseAction","useState","data","setData","useEffect","a","lat","lon","fetch","process","then","result","json","fetchData","main","Card","Header","name","sys","country","Icon","onClick","Content","moment","format","temp","Date","sunrise","toLocaleTimeString","sunset","weather","humidity","Segment","Dimmer","active","inverted","Loader","size","App","cities","setCities","results","setResults","setValue","loading","setLoading","buttonRef","useRef","timeoutRef","prevCities","JSON","parse","window","localStorage","getItem","length","navigator","geolocation","getCurrentPosition","position","latitude","longitude","key","generateKey","Math","random","toString","slice","handleCloseAction","newCities","remove","city","setItem","stringify","Container","Search","placeholder","onResultSelect","e","coord","current","focus","onSearchChange","clearTimeout","setTimeout","regExp","RegExp","escapeRegExp","mappedResults","filter","citiesData","test","sort","b","map","title","uniqResults","uniqBy","find","splice","Button","circular","color","content","icon","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8d30d36.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\nimport './WeatherCard.css';\nimport { Dimmer, Loader, Segment, Card, Icon } from 'semantic-ui-react';\n\nconst CardInfo = ({ description, value }) => (\n    <div className='card__info'>\n        <span>{`${description}:`}</span>\n        <span className='card__info__value'>{value}</span>\n    </div>\n);\n\nconst WeatherCard = ({ id, coords, onCloseAction }) => {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const { lat, lon } = coords;\n            await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${lon}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n                .then(result => result.json())\n                .then(json => {\n                    setData(json);\n                });\n        }\n        fetchData();\n    }, [coords]);\n\n    const handleCloseAction = () => onCloseAction(id);\n\n    return data.main\n        ? (\n            <Card className='card'>\n                <Card.Header className=\"card__header\">\n                    <span>\n                        {`${data.name} (${data.sys.country})`}\n                    </span>\n                    <Icon\n                        className='card__icon'\n                        name='remove'\n                        onClick={handleCloseAction}\n                    />\n                </Card.Header>\n                <Card.Content>\n                    <CardInfo description='Day' value={moment().format('dddd')} />\n                    <CardInfo description='Date' value={moment().format('LL')} />\n                    <CardInfo description='Temprature' value={`${data.main.temp} Â°C`} />\n                    <CardInfo description='Sunrise' value={new Date(data.sys.sunrise * 1000).toLocaleTimeString('en-IN')} />\n                    <CardInfo description='Sunset' value={new Date(data.sys.sunset * 1000).toLocaleTimeString('en-IN')} />\n                    <CardInfo description='Description' value={data.weather[0].main} />\n                    <CardInfo description='Humidity' value={data.main.humidity} />\n                </Card.Content>\n            </Card>\n        )\n        : (\n            <Segment className='card'>\n                <Dimmer active inverted>\n                    <Loader inverted size='large'>Loading</Loader>\n                </Dimmer>\n            </Segment>\n        )\n}\n\nexport default WeatherCard;\n","import './App.css';\nimport React, { useEffect, useState, useRef } from \"react\";\nimport WeatherCard from './components/WeatherCard';\nimport { Search, Container, Button } from 'semantic-ui-react';\nimport citiesData from './utils/cities.json';\nimport { filter, escapeRegExp, uniqBy, remove } from 'lodash';\n\nexport default function App() {\n  const [cities, setCities] = useState([]);\n  const [results, setResults] = useState([]);\n  const [value, setValue] = useState('');\n  const [loading, setLoading] = useState(false);\n  const buttonRef = useRef();\n  const timeoutRef = useRef();\n\n  useEffect(() => {\n    const getCurrentPosition = () => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCities([{\n          coords: {\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          },\n          key: generateKey()\n        }]);\n      });\n    };\n    const prevCities = JSON.parse(window.localStorage.getItem('cities'));\n    if (prevCities && prevCities.length > 0) {\n      setCities(prevCities);\n    } else {\n      getCurrentPosition();\n    }\n  }, [])\n\n  const generateKey = () => Math.random().toString(36).slice(2);\n\n  const handleSearchChange = (e, data) => {\n    clearTimeout(timeoutRef.current)\n    setValue(data.value);\n    setLoading(true);\n    if (data.value) {\n      timeoutRef.current = setTimeout(() => {\n        const regExp = new RegExp(escapeRegExp(data.value), 'i');\n        const isMatch = (result) => regExp.test(result.name);\n        const mappedResults = filter(citiesData, isMatch)\n          .sort((a, b) => a.name.length - b.name.length)\n          .map(result => ({\n            ...result,\n            title: `${result.name} (${result.country})`\n          }));\n        const uniqResults = uniqBy(mappedResults, 'title')\n          .filter(result => !cities.find(city => {\n            return city.coords.lat === result.coord.lat\n              && city.coords.lon === result.coord.lon\n          }));\n        setResults(uniqResults.splice(0, 6));\n        setLoading(false);\n      }, 500)\n    } else {\n      setLoading(false);\n    }\n  }\n\n  const handleResultSelect = (e, data) => {\n    setValue('');\n    const newCities = [\n      {\n        coords: { ...data.result.coord },\n        key: generateKey()\n      },\n      ...cities\n    ];\n    setCities(newCities);\n    window.localStorage.setItem('cities', JSON.stringify(newCities));\n    setResults([]);\n    buttonRef.current.focus();\n  }\n\n  const handleRefresh = () => {\n    setCities(cities.map(city => ({ ...city, key: generateKey() })));\n  }\n\n  const handleCloseAction = (key) => {\n    let newCities = [...cities];\n    remove(newCities, city => city.key === key);\n    setCities(newCities);\n    window.localStorage.setItem('cities', JSON.stringify(newCities));\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n\n        <div className=\"search-container\">\n          <Search\n            placeholder='Search more cities...'\n            onResultSelect={handleResultSelect}\n            onSearchChange={handleSearchChange}\n            results={results}\n            value={value}\n            loading={loading}\n          />\n          <Button\n            circular\n            color='facebook'\n            size='big'\n            className='refresh-button'\n            content='Refresh'\n            icon='refresh'\n            onClick={handleRefresh}\n            ref={buttonRef}\n          />\n        </div>\n\n        <div className='cards-container'>\n          {cities.length > 0 && cities.map(city => (\n            <WeatherCard\n              id={city.key}\n              key={city.key}\n              coords={city.coords}\n              onCloseAction={handleCloseAction}\n            />\n          ))}\n        </div>\n\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}